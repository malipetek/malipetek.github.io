window.RENDER['md'] = async function(responseText) {
    let head;  
    [responseText, head] = responseText.split(/----\s*meta\s*head\s*----/gi).reverse();
    
    const image = (head.match(/image:[^\n]+[\n$]/gi) || [''])[0].replace('image:', '');
    const title = (head.match(/title:[^\n]+[\n$]/gi) || [''])[0].replace('title:', '');
    const summary = (head.match(/summary:[^\n]+[\n$]/gi) || [''])[0].replace('summary:', '');
    const description = (head.match(/description:[^\n]+[\n$]/gi) || [''])[0].replace('description:', '');
    const keywords = (head.match(/keywords:[^\n]+[\n$]/gi) || [''])[0].replace('keywords:', '');
    
    const meta = {
        tw: function(name, content) {
            meta.do.apply(null, [...arguments, 'twitter']);
        },
        og: function(name, content) {
            meta.do.apply(null, [...arguments, 'og']);
        },
        do: (name, content, type) => {
            const meta = document.createElement('meta');
            meta.setAttribute('name', `${type ? `${type}:` : '' }${name}`);
            meta.setAttribute('content', content.replace(/\n/, ''));
            document.head.append(meta);
        }
    }
    
    meta.tw('image:src', image);
    meta.tw('title', title);
    meta.tw('summary', summary);
    meta.tw('description', description);
    meta.tw('site', '@malipetek');
    
    meta.og('image', image);
    meta.og('title', title);
    meta.og('summary', summary);
    meta.og('description', description);
    meta.og('site_name', 'malipetek');
    
    meta.do('description', description);
    meta.do('title', description);
    meta.do('keywords', (keywords || description.split(' ').join(', ')));
    meta.do('author', 'M.Ali Petek');
    
  
    await window.require(
      "https://cdnjs.cloudflare.com/ajax/libs/markdown-it/10.0.0/markdown-it.min.js"
    );
    await window.require(
      "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/highlight.min.js"
    );
    await window.require(
      "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.10/languages/javascript.min.js"
    );
    await window.require(
      "../static/scripts/clipboard.module"
    );
    
    if (window.markdownit) {
      if (window.hljs) {
        var copyButton = `<div class="copy-btn clearfix" title="copy" onclick="
        var code = event.currentTarget.nextElementSibling.getElementsByTagName('code')[0];
        window.CBoard.copy(code.textContent);
        code.parentNode.style.outlineOffset = '50px';
        code.parentNode.style.outlineColor = '#fff';
        setTimeout(() => {
          code.parentNode.style.outlineColor = 'transparent';
          setTimeout( () => code.parentNode.style.outlineOffset = '0px', 600)
        },50)">
         <img src="/static/images/copy.svg" />
    </div>`;
        window.md = window.markdownit({
          html: true,
          linkify: true,
          highlight: function(str, lang) {
            if (lang && window.hljs.getLanguage(lang)) {
              try {
                var code = window.hljs.highlight(lang, str, true).value;
                return (`${copyButton}
                  <pre class="hljs"><code>${code}</code></pre>`
                );
              } catch (__) {}
            }

            return (
              '<pre class="hljs"><code>' +
              window.md.utils.escapeHtml(str) +
              "</code></pre>"
            );
          }
        });
      } else {
        window.md = window.markdownit();
      }
      return window.md.render(responseText);
    }
  }
